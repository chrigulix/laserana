## 
##  A little module that spits out the start and end positions of the specified 
##  wires.
##
##  author: maluethi 
##
## Yifan was here
#include "services_microboone.fcl"
#include "reco_uboone_data_minimal.fcl"

process_name: WirePositionPrinter

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  Timing:                  {}
  #SimpleMemoryCheck:       { ignoreTotal: 1 } # default is one
  #RandomNumberGenerator:   {} #ART native random number generator
  #message:                 @local::microboone_message_services_prod_debug
  #FileCatalogMetadata:     @local::art_file_catalog_data
  @table::microboone_reco_minimal_services
}

source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1          # Number of events to create
}


physics:
{

 analyzers:
  {
    WireInfo: 
    {
        module_type:          "WireInfo"
        Wires:                [[0,0], [0,1], [1,0], [1,1],  [2,0], [2,1]]
    }
  }
  reco: [ WireInfo ]
 trigger_paths: [ reco ]

}


### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       TrackStitcher:
       {
         limit: 0
         reportEvery: 0
       }
       CRHitRemoval:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}
