## 
##  A "minimal" Reconstruction for uboone data
##

#include "services_microboone.fcl"
#include "mccheatermodules.fcl"

process_name: GetTracks

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "Tracks-%04r-%03s-nosce.root" }
  #Timing:                  {}
  #SimpleMemoryCheck:       { ignoreTotal: 1 } # default is one
  #RandomNumberGenerator:   {} #ART native random number generator
  #message:                 @local::microboone_message_services_prod_debug
}

# source is now a root file
source:
{
  module_type: RootInput
  #maxEvents:  1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
  {
    GetTracks:
    {
        module_type:          "GetTracks"
        TrackLabel:           "pandoraCosmic"
        GetTracks: false
        GetLaser: false
        GetMC: true
    }
    backtrack:    @local::standard_backtrackerloader
  }

 # define the producer and filter modules for this path, order matters,
 # filters reject all following items.  see lines starting physics.producers below
 reco: [ backtrack, GetTracks ]

 # define the output stream, there could be more than one if using filters
 # stream1:  [ out1 ]

 # trigger_paths is a keyword and contains the paths that modify the art::event,
 # ie filters and producers
 trigger_paths: [reco]

 # analysis : [TimeMapProducer]

 # end_paths is a keyword and contains the paths that do not modify the art::Event,
 # ie analyzers and output streams.  these all run simultaneously
 # end_paths:     [analysis]
}

# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
}

services.SpaceCharge.EnableSimSpatialSCE: false
services.SpaceCharge.EnableSimEfieldSCE: false
services.SpaceCharge.EnableCorrSCE: false

