## 
##  A "minimal" Reconstruction for uboone data
##
#include "reco_uboone_data_minimal.fcl"

process_name: LaserHitReco

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "LaserHits.root" }
  RandomNumberGenerator:   {} #ART native random number generator
  @table::microboone_reco_minimal_services
  message: @local::standard_info
}
services.DetectorClocksService.InheritClockConfig: false
services.DatabaseUtil.ShouldConnect: false
services.DetPedestalService.DetPedestalRetrievalAlg.UseDB: true

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
  {
    LaserReco: 
    {
      module_type:         "LaserReco"

      GenerateWireMap:         false
      UseROI:            false
      HitBoxSize:              10       #cm

      LaserRecoModuleLabel:       "daq"
      LaserDataMergerModuleLabel: "LaserDataMerger"
      LaserBeamInstanceLabel:     "LaserBeam"

      MinAllowedChannelStatus: 4

      # High amplitude threshold for high signal exceptions for all planes
      HighAmplThreshold:       1000

      # U-Plane hit thresholds
      UHitPeakThreshold:      -25.0
      UAmplitudeToWidthRatio:  1
      UHitWidthThreshold:      10

      # V-Plane hit thresholds
      VHitPeakThreshold:       10.0
      VAmplitudeToWidthRatio:  1.0
      VAmplitudeToRMSRatio:    2.0
      VHitWidthThreshold:      12
      VRMSThreshold:           4

      # Y-Plane hit thresholds
      YHitPeakThreshold:       10.0
      YAmplitudeToWidthRatio:  1.5
      YHitWidthThreshold:      6
    }
  }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ LaserReco ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_LaserHitFinder.root"
   #sam_ignore:  true
   dataTier:    "reconstructed-2d"
   outputCommands: ["keep *_*_*_*",  "drop raw::RawDigits_*_*_*", "drop raw::OpDetWaveforms_*_*_*", "drop raw::BeamInfo_*_*_*"]
   compressionLevel: 1
 }
}

### Here we include the file giving us run/data dependent overrides
#include "uboone_data_runSettings.fcl"

### Here we try to suppress known and pointless messages
#services.message.destinations :
#{
  #STDCOUT: 
  #{
  #   type:      "cout"      #tells the message service to output this destination to cout
  #   threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
  #   append:     true       #says to append all messages to the output
  #   categories:
  #   {
  #     ChannelFilter:
  #     {
  #       limit: 0
  #       reportEvery: 0
  #     }
  #     TrackStitcher:
  #     {
  #       limit: 0
  #       reportEvery: 0
  #     }
  #     CRHitRemoval:
  #     {
  #       limit: 0
  #       reportEvery: 0
  #     }
  #     default:
  #     {
  #       limit: -1  #don't print anything at the infomsg level except the explicitly named categories
  #       reportEvery: 1
  #     }
  #   }
  #}
#}
